@page
@model BulkyWebRazor_Temp.Pages.Categories.EditModel


<form method="post">							@* ustawia metodę wysyłki formularza na POST, co oznacza, że dane formularza zostaną przesłane do serwera bez wyświetlania ich w URL-u (co jest bardziej bezpieczne, szczególnie dla danych wrażliwych). *@
		<input asp-for="Category.Id" hidden />				@* Atrybut hidden w tagu <input> sprawia, że pole formularza jest niewidoczne dla użytkownika, ale jego wartość jest nadal wysyłana do serwera podczas przesyłania formularza. Jest to bardzo przydatne, gdy chcesz, aby pewna wartość była dostępna na serwerze, ale nie chcesz, aby użytkownik ją mógł zobaczyć lub edytować. *@
	<div class="border p-3 mt-4">@* Ta sekcja otacza cały formularz. Klasy Bootstrapu dodają tutaj:border - ramkę wokół całej zawartości formularza.p-3 - margines wewnętrzny (padding) równy 3 jednostkom, co w Bootstrapie wynosi zwykle 1.5 rem, a nie piksele.mt-4 - margines górny (margin-top) równy 4 jednostkom (około 1.5 rem), co tworzy odstęp od góry.	*@
		<div class="row pb-2">
			<h2 class="text-primary">Edit Category</h2>
			<hr/>		@* pozioma linia przerywająca treść *@
		</div>

		<div asp-validation-summary="All"></div>	@* używamy go do wyświetlania zbiorczego podsumowania komunikatów o błędach walidacyjnych w formularzu.Wartość "All" oznacza, że zostaną wyświetlone wszystkie komunikaty o błędach walidacyjnych, które są obecne w modelu ModelState *@
		@* ModelState w ASP.NET Core to obiekt, który przechowuje stan modelu, zwłaszcza podczas przetwarzania danych wejściowych w formularzach. ModelState jest używany do weryfikacji danych, które użytkownik przesyła do serwera, oraz do przechowywania wszelkich błędów walidacji związanych z tymi danymi *@
		@* <div asp-validation-summary="ModelOnly "></div>					nie wyświetla wiadomosci error dla właściwości takich jak name i display order (czyli wyswietli error z "test is invalid value" bo nie połączyliśmy do z żadnym z pól *@
		@* <div asp-validation-summary="none "></div>					nie wyświetla zadnych wiadomosci w validation summary *@

		<div class="mb-3 p-1">
			<label asp-for="Category.Name"></label>
			<input asp-for="Category.Name" class="form-control" />							@* asp-for przypisze wartosc ktora wpiszemy do zmiennej Name w modelu (np inna nazwa juz nie przejdzie np. Name1 (bedzie błąd))*@
			<span asp-validation-for="Category.Name" class="text-danger"></span>				@* używamy go w widokach ASP.NET Core MVC do wyświetlania komunikatów walidacyjnych związanych z polem Name w modelu *@
		</div>
		<div class="mb-3 p-1">
			<label asp-for="Category.DisplayOrder"></label>							@* tutaj jezeli damy asp-for="DisplayOrder" to automatycznie framework zrobi label z podpisem displayOrder *@
			<input asp-for="Category.DisplayOrder" class="form-control" />
			<span asp-validation-for="Category.DisplayOrder" class="text-danger"></span>
		</div>


		<div class="row">
			<div class="col-6 col-md-3"> @* jezeli ekran jest medium lub large to weź 3 kolumny a jezeli mniejszy niż medium to weź 6 kolumn (robimy to aby dla mnieszych ekranow nie rozwalało formularza*@
				<button type="submit" class="btn btn-primary form-control">Update</button>
			</div>
			<div class="col-6 col-md-3">
				<a asp-page="/Categories/Index" class="btn btn-secondary border form-control">Back to List</a>			@* form-control umożliwia to żeby przycisk wypełniał całą szerokośc kontenera *@
			</div>
		</div>



	</div>
</form>


@section Scripts {
	@* ten skrypt sprawia ,że zostanie przeprowadzona walidacja wpisanychdanych przed wyslaniem do serwera (mniej obciąża serwer) ale jezeli jest recznie wpisany kod w kontroler ze np name jest rowny "test" to on juz tego nie bedzie sprawdzal tylko sprawdzenie nastapi po stronie serwera (czyli sprawdza defaultowe validacje a customowych nie sprawdza)*@
	@{
					<partial name="_ValidationScriptsPartial"/>
	}
}
